import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation

class cellulaire_automata:
    '''
    Omschrijving
    ------------
    Een klasse voor het maken van een rooster voor een willekeurige CA.
    
    Parameters
    ----------
    hoogte: int
        De hoogte van het rooster.
    breedte: int
        De breedte van het rooster.
    begin: list
        De beginsituatie voor een een-dimensionale CA.
    
    '''
    def __init__(self, hoogte, breedte, begin):
        '''
        Parameters
        ----------
        hoogte : int
            De hoogte van het rooster.
        breedte : int
            De breedte van het rooster.
        begin : list
            De beginsituatie voor een een-dimensionale CA.

        Returns
        -------
        None.
        
        '''
        self.hoogte = hoogte
        self.breedte = breedte
        self.begin = begin
    
    def __str__(self):
        '''
        Omschrijving
        ------------
        Functie om te zorgen dat we een object in cellulaire_automata kunnen printen als rooster.
        
        Returns
        -------
        str
            Returns een rooster opgebouwd met behulp van de hoogte, breedte en een begin-waarde.

        '''
        return str(self.maak_rooster(self.begin))
    
    def maak_rooster(self, begin):
        '''
        Omschrijving
        ------------
        Functie die een rooster maakt van alleen nullen, behalve bij de eerste rij. Deze is gevuld met nullen en de input van begin.
        
        Parameters
        ----------
        begin : list
            De beginsituatie voor een-dimensionale CA.

        Returns
        -------
        rooster : list
            Lijst met lijsten die corresponderen met de kolommen van een rooster. 
            Deze lijsten bevatten bovendien alleen eenen en nullen.

        '''
        import math
        rooster = [[0]*self.breedte]*self.hoogte
        lijst1 = [0]*math.ceil((self.breedte-3)/2)
        lijst2 = [0]*math.floor((self.breedte-3)/2)
        rooster[0] = lijst1+begin+lijst2
        return rooster
    
    def maak_willekeurig_rooster(self):
        '''
        Omschrijving
        ------------
        Functie die een rooster maakt met willekeurige nullen en eenen, waarbij nullen een kans van 0.8 hebben en eenen een kans van 0.2 hebben om te ontstaan.
        
        Returns
        -------
        rooster : ndarray
            Rooster met willekeurige nullen en eenen, waarbij nullen een kans van 0.8 hebben en eenen een kans van 0.2 hebben om te ontstaan.

        '''
        rooster = np.random.choice([1, 0], self.breedte*self.hoogte, p=[0.2, 0.8]).reshape(self.breedte, self.hoogte)
        return rooster
    
    def __repr__(self):
        '''
        Omschrijving
        ------------
        Functie die een beschrijving geeft bij de verschillende self-objecten.
        
        Returns
        -------
        str
            Geeft een beschrijving van de verschillende self-objecten.

        '''
        return f'CA: hoogte ={self.hoogte}, breedte = {self.breedte}, begin = {self.begin}'

class een_dimensionaal(cellulaire_automata):
    '''
    Omschrijving
    ------------
    Een klasse om een een-dimensionale CA te evolueren en grafisch weer te geven.
    
    Parameters
    ----------
    hoogte: int
        De hoogte van het rooster.
    breedte: int
        De breedte van het rooster.
    begin: list
        De beginsituatie van de een-dimensionale CA.
    lijst0 : list
        Lijst van lijsten van alle combinaties van drie getallen, bestaand uit een of nul, die naar nul gaan na evolutie. 
    lijst1 : list
        Lijst van lijsten van alle combinaties van drie getallen, bestaand uit een of nul, die naar een gaan na evolutie.
    
    
    '''
    
    def __init__(self, hoogte, breedte, begin, lijst0, lijst1):
        '''
        Parameters
        ----------
        hoogte : int
            De hoogte van het rooster.
        breedte : int
            De breedte van het rooster.
        begin : list
            De beginsituatie voor een een-dimensionale CA.
        lijst0 : list
            Lijst van lijsten van alle combinaties van drie getallen, bestaand uit een of nul, die naar nul gaan na evolutie. 
        lijst1 : list
            Lijst van lijsten van alle combinaties van drie getallen, bestaand uit een of nul, die naar een gaan na evolutie.

        Returns
        -------
        None.

        '''
        self.hoogte = hoogte
        self.breedte = breedte
        self.begin = begin
        self.lijst0 = lijst0
        self.lijst1 = lijst1
        
    def buren(self, begin):
        '''
        Omschrijving
        ------------
        Functie die de buren bepaalt van iedere cel van een een-dimensionale CA en deze vervolgens in een lijst zet. 
        Deze lijst wordt vervolgens gestopt in de functie evolueren(). Dan komt er een getal uit die vervolgens toegevoed wordt aan lijst. 
        Dit is uiteindelijke de lijst met getallen van de nieuwe rij.
        
        Parameters
        ----------
        begin : list
            De beginsituatie voor een een-dimensionale CA.

        Returns
        -------
        lijst : list
            Lijst van nullen en eenen die verkregen zijn door de lijsten met buren in de functie evolueren te stoppen.
            Deze lijst is de nieuwe rij van de CA.
        '''
        burenlijst = []
        rooster = super().maak_rooster(begin)
        lijst = [rooster[0]]
        for i in range(1, self.hoogte):
            for j in range(0,self.breedte):
                burenlijst.append([rooster[i-1][(j-1)%self.breedte], rooster[i-1][j%self.breedte], rooster[i-1][(j+1)%self.breedte]])
            rooster[i] = self.evolueren(burenlijst)
            lijst.append(rooster[i])
            burenlijst.clear()
        return lijst

    def evolueren(self, burenlijst):
        '''
        Omschrijving
        ------------
        Functie om een cel te evolueren met behulp van de buren van deze cel.
        Parameters
        ----------
        burenlijst : list
            Lijst van lijsten van alle buren van ieder element van een rij.

        Returns
        -------
        regel : list
            Lijst van eenen en nullen van de nieuwe rij.

        '''
        regel = []
        for lijst in burenlijst:
            if lijst in self.lijst0:
                regel.append(0)
            elif lijst in self.lijst1:
                regel.append(1)
        return regel
    
    def grafisch(self):
        '''
        Omschrijving
        ------------
        Plot de lijst van lijsten, die de kolommen van het rooster zijn.
        
        '''
        plt.figure(figsize=(10,6))
        plt.imshow(self.buren(self.begin), cmap='hot')
        
    def __str__(self):
        '''
        Omschrijving
        ------------
        Functie om een object in een_dimensionaal als rooster te printen.
        
        Returns
        -------
        str
            Verenigd alle rijen van het rooster en format dit zodat het een rooster wordt van juiste hoogte en breedte.

        '''
        return '\n'.join([str(stuff) for stuff in self.buren(self.begin)])
    
    def __repr__(self):
        '''
        Omschrijving
        ------------
        Functie die een beschrijving geeft bij de verschillende self-objecten en het lijst0- en lijst1-object.
                
        Returns
        -------
        str
            Geeft een beschrijving van de verschillende self-objecten, 
            deze worden afgeleidt van een eerdere __repr__ functie, en geeft een beschrijving van de lijst0- en lijst1-objecten.

        '''
        return f'1d: lijst0={self.lijst0}, lijst1={self.lijst1}, {super().__repr__()}'
    
class twee_dimensionaal(cellulaire_automata):
    '''
    Omschrijving
    ------------
    Een klasse om een twee-dimensionale CA te evolueren en grafisch weer te geven.
    
    Parameters
    ----------
    hoogte : int
        De hoogte van het rooster.
    breedte : int
        De breedte van het rooster.
    
    '''
    def __init__(self, hoogte, breedte, aantal_updates):
        '''
        Parameters
        ----------
        hoogte : int
            De hoogte van het rooster.
        breedte : int
            De breedte van het rooster.
        aantal_updates: int
            Aantal keer dat het rooster wordt geevolueerd

        Returns
        -------
        None.

        '''
        self.hoogte = hoogte
        self.breedte = breedte
        self.aantal_updates = aantal_updates
        
    def __str__(self):
        '''
        Omschrijving
        ------------
        Functie om een object in twee_dimensionaal weer te geven als geëvolueerd rooster.
        
        Returns
        -------
        str
            Returns een geëvolueerd rooster.

        '''
        return str(self.evolueer(super().maak_willekeurig_rooster(), self.aantal_updates))
    
    def evolueer(self, rooster, aantal_updates):
        '''
        Omschrijving
        ------------
        Functie om de buren van een cel te bepalen. hier vervolgens een waarde uit te bepalen en deze waarde gebruiken om de cel te evolueren.
        Parameters
        ----------
        rooster : list
            Een lijst van lijsten van nullen en eenen.

        Returns
        -------
        nieuw_rooster : list
            Een lijst van het nieuwe rooster.

        '''
        nieuw_rooster = rooster.copy()
        teller = 0
        while teller < aantal_updates:
            for i in range(self.hoogte):
                for j in range(self.breedte):
                    som = int(rooster[(i-1)%self.hoogte][(j-1)%self.breedte] + rooster[(i-1)%self.hoogte][j] +
                                   rooster[(i-1)%self.hoogte][(j+1)%self.breedte] + rooster[i][(j+1)%self.breedte] +
                                   rooster[(i+1)%self.hoogte][(j+1)%self.breedte] + rooster[(i+1)%self.hoogte][j] +
                                   rooster[(i+1)%self.hoogte][(j-1)%self.breedte] + rooster[i][(j-1)%self.breedte])
                    if rooster[i][j] == 1:
                        if som < 2 or som > 3:
                            nieuw_rooster[i][j] = 0
                    else:
                        if som == 3:
                            nieuw_rooster[i][j] = 1
            if teller != aantal_updates -1:
                print(nieuw_rooster)
            teller+=1
            rooster[:] = nieuw_rooster[:]
        return nieuw_rooster
